% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/construct_dds.R
\name{construct_matrix_dds}
\alias{construct_matrix_dds}
\title{Construct a DESeqDataSet from a counts matrix and column data}
\usage{
construct_matrix_dds(countData, colData, design = ~1, ...)
}
\arguments{
\item{countData}{for matrix input: a matrix of non-negative integers}

\item{colData}{for matrix input: a \code{DataFrame} or \code{data.frame} with at least a single column.
Rows of colData correspond to columns of countData}

\item{design}{a \code{formula} or \code{matrix}.
the \code{formula} expresses how the counts for each gene
depend on the variables in \code{colData}. Many R \code{formula} are valid,
including designs with multiple variables, e.g., \code{~ group + condition},
and designs with interactions, e.g., \code{~ genotype + treatment + genotype:treatment}.
See \code{\link[DESeq2]{results}} for a variety of designs and how to extract results tables.
By default, the functions in this package will use 
the last variable in the formula for building results tables and plotting.
\code{~ 1} can be used for no design, although users need to remember
to switch to another design for differential testing.}

\item{...}{arguments provided to \code{SummarizedExperiment} including rowRanges and metadata. Note that
for Bioconductor 3.1, rowRanges must be a GRanges or GRangesList, with potential metadata columns
as a DataFrame accessed and stored with \code{mcols}. If a user wants to store metadata columns
about the rows of the countData, but does not have GRanges or GRangesList information,
first construct the DESeqDataSet without rowRanges and then add the DataFrame with \code{mcols(dds)}.}
}
\value{
A \code{DESeqDataSet} object.
}
\description{
\code{construct_matrix_dds()} is essentially a wrapper around \code{\link[DESeq2:DESeqDataSet]{DESeq2::DESeqDataSetFromMatrix()}}
that offers additional validation of sample order in the counts matrix and column data as required to
construct the \code{DESeqDataSet} object.

\code{construct_matrix_dds()} subsets the counts matrix and column data by the sorted intersection of counts matrix
column names and column data row names, then constructs a \code{DESeqDataSet} object from the subset of the counts
matrix and column data.
}
